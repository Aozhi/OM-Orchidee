; OM File Header - Saved 2012/01/18 12:44:24
; (6.050102 :patc (om-make-point 258 130) (om-make-point 513 295) (om-make-point 1260 948) "" 183 0 nil "2012/01/18 12:26:25")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/my_synt.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma" "OM-Orchidee")))(setf *om-current-persistent* (om-load-patch1 "05-advanced-features" (quote ((om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 675 408) (om-make-point 78 69) (load-buffer-textfile (quote nil) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 362 157) (quote "For each filter, specify:$- An attribute to filter$- A filtering \"mode\"$- The value(s) to filter$$Filtering modes can be selected amoing 'free' (filter disabled), 'auto' (let Orchidée select the domain), 'force' (force a specific set of values), include (specify a minimal set of values), 'exclude' (exclude one or several values).") nil (om-make-point 478 630) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ORC-FILTER" (quote orc-filter) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "attribute to filter" "attribute" "dbname") (om-load-inputfunmenu1 (quote input-funmenu) "filter mode (select from list)" "mode" "force" (list (list "free" "free") (list "auto" "auto") (list "force" "force") (list "include" "incude") (list "exclude" "exclude"))) (om-load-inputfun (quote input-funbox) "values" "values" "my-db"))) (om-make-point 587 786) (om-make-point 100 67) (if (find-class (quote orc-filter) nil) (make-instance (quote orc-filter) :attribute "dbname" :mode "force" :vals "my-db" :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) nil nil nil t) (om-load-editor-box1 "ORC-SOLUTIONSET" (quote orc-solutionset) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "solutions" nil) (om-load-inputfun (quote input-funbox) "" "selection" nil))) (om-make-point 157 819) (om-make-point 128 76) (if (find-class (quote orc-solutionset) nil) (make-instance (quote orc-solutionset) :solutions nil :selection nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 305 161) (om-make-point 600 300))) nil nil nil t) (om-load-editor-box1 "SOUNDTARGET2" (quote soundtarget) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "chord" (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (om-load-inputfun (quote input-funbox) "" "params" nil) (om-load-inputfun (quote input-funbox) "" "operateurs" nil) (om-load-inputfun (quote input-funbox) "" "freq-filter" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "" "synth-class" (quote add-1)) (om-load-inputfun (quote input-funbox) "" "snd" nil))) (om-make-point 67 618) (om-make-point 95 63) (let ((rep (if (find-class (quote soundtarget) nil) (make-instance (quote soundtarget) :chord (let ((thechord (make-instance (quote chord-spectra) :lmidic (quote (5800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) :params (list (list (list (quote :nb-harm) 22) (list (quote :stretch-fact) (list 100)) (list (quote :amps) (list 0.0014125379 0.07943282 0.15848932 0.17782794 0.14125374 0.14125374 0.14125374 0.14125374 0.12589255 0.70866144 0.07943282 0.70794577 0.03981072 0.19952624 0.005011873 0.056234133 0.0031622777 0.019952622 0.015848933 0.012589254 0.01 0.0070794565)) (list (quote :add-partiels) nil))) :operateurs nil :freq-filter (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 2059.6 2632.2 4857.5)) (quote (-60.0 0.0 0.0 0.0 -75.2 -100.8 -94.4)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :synth-class (quote add-1) :snd (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) :from-file t)))) (setf (analysisparams rep) (list 80 25 "ChordSeq+ERB")) (setf (chordinfo rep) 0) (setf (chordmode rep) 2) (setf (targetchord rep) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote (((0) (om-make-color 0.5 0.5 0.5))))) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) rep) "x" nil (pairlis (quote (mode winpos winsize)) (list 1 (om-make-point 143 137) (om-make-point 1060 600))) nil nil nil t) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 46 821) (om-make-point 67 66) (load-buffer-textfile (quote nil) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "ORCHESTRA1" (quote orchestra) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "orc-contents" nil) (om-load-inputfun (quote input-funbox) "" "microtones" 2))) (om-make-point 166 617) (om-make-point 107 64) (if (find-class (quote orchestra) nil) (make-instance (quote orchestra) :orc-contents (list (list (list "ASax") 1) (list (list "BTb") 3) (list (list "Hn") 1) (list (list "Vn") 1) (list (list "Vc") 3)) :microtones 2 :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 380 420) (om-make-point 963 217))) nil nil nil t) (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil) (om-load-inputkeyword (quote input-keyword) "" "filters" (quote :filters) nil nil))) (om-make-point 143 715) (om-make-point 96 59) (list (om-make-pathname :directory (quote (:absolute "Users" "bresson" "Dropbox" "workspaces" "om-acmmm" "out-files")) :device nil :host nil :name "orchidee" :type "txt")) "x" nil 1) (om-load-boxcomment "comment" (om-make-point 454 64) (quote ":fliters = restricts the search domain by specifying constraints.$$=> Connect a list of (or one) ORC-FILTER object(s)") nil (om-make-point 51 550) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "how to add samples and databases" (om-load-patch-abs1 "how to add samples and databases" (quote ((om-load-boxcomment "comment 2" (om-make-point 868 110) (quote "Use the button \"Update DataBase\" in the OM-Orchidée preferences dialog in order to computer the descriptors for the new samples (which should automatically be added in the 'xml' folder) and update Orchidée's internal knowledge to the new contents of the database folders.$$You can then decide to use parts of your database by selecting the corresponding folder names to connect to the <dbnames> input of the ORCHESTRATE function. ") nil (om-make-point 76 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 853 99) (quote "The database main folder must be set in the OM preferences. $$In this folder are two subfolders: 'sounds\" and 'xml'. In 'sounds', different sound database can coexists. The default one is 'orchidee-forum\"', and you can add other folders respecting the same hierarchical architecture and naming conventions.") nil (om-make-point 80 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 370 34) (quote "How to add samples in the Orchidée database") "" (om-make-point 80 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 1064 320)) (quote nil) (om-make-point 940 315) nil nil nil "how to add samples and databases") (om-load-boxcall (quote genfun) "DB-NAMES" (quote db-names) (quote nil) (om-make-point 1000 116) nil nil nil nil 1) (om-load-editor-box1 "ORC-SOLUTIONSET" (quote orc-solutionset) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "solutions" nil) (om-load-inputfun (quote input-funbox) "" "selection" nil))) (om-make-point 775 406) (om-make-point 128 76) (if (find-class (quote orc-solutionset) nil) (make-instance (quote orc-solutionset) :solutions nil :selection nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 519 38) (om-make-point 600 300))) nil nil nil t) (om-load-editor-box1 "SOUNDTARGET2" (quote soundtarget) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "chord" (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (om-load-inputfun (quote input-funbox) "" "params" nil) (om-load-inputfun (quote input-funbox) "" "operateurs" nil) (om-load-inputfun (quote input-funbox) "" "freq-filter" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "" "synth-class" (quote add-1)) (om-load-inputfun (quote input-funbox) "" "snd" nil))) (om-make-point 685 205) (om-make-point 95 63) (let ((rep (if (find-class (quote soundtarget) nil) (make-instance (quote soundtarget) :chord (let ((thechord (make-instance (quote chord-spectra) :lmidic (quote (5800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) :params (list (list (list (quote :nb-harm) 22) (list (quote :stretch-fact) (list 100)) (list (quote :amps) (list 0.0014125379 0.07943282 0.15848932 0.17782794 0.14125374 0.14125374 0.14125374 0.14125374 0.12589255 0.70866144 0.07943282 0.70794577 0.03981072 0.19952624 0.005011873 0.056234133 0.0031622777 0.019952622 0.015848933 0.012589254 0.01 0.0070794565)) (list (quote :add-partiels) nil))) :operateurs nil :freq-filter (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 2059.6 2632.2 4857.5)) (quote (-60.0 0.0 0.0 0.0 -75.2 -100.8 -94.4)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :synth-class (quote add-1) :snd (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) :from-file t)))) (setf (analysisparams rep) (list 80 25 "ChordSeq+ERB")) (setf (chordinfo rep) 0) (setf (chordmode rep) 2) (setf (targetchord rep) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote (((0) (om-make-color 0.5 0.5 0.5))))) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) rep) "x" nil (pairlis (quote (mode winpos winsize)) (list 1 (om-make-point 143 137) (om-make-point 1100 600))) nil nil nil t) (om-load-editor-box1 "MULTI-ITEM-LIST-BOX" (quote multi-item-list-box) (quote ((om-load-inputfun (quote input-funbox) "list items" "items" (list "uno" "dos" "tres" "cuatro")))) (om-make-point 966 178) (om-make-point 128 99) (let ((rep (om-make-dialog-item (quote multi-item-list) (om-make-point 1 1) (om-make-point 112 66) "untitled" :range (quote ("bresson" "orchidee-forum"))))) (om-set-selected-item-index rep (quote (1))) (setf (di-data rep) (quote ("bresson" "orchidee-forum"))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) t nil nil nil) (om-load-editor-box1 "ORCHESTRA1" (quote orchestra) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "orc-contents" nil) (om-load-inputfun (quote input-funbox) "" "microtones" 2))) (om-make-point 784 204) (om-make-point 107 64) (if (find-class (quote orchestra) nil) (make-instance (quote orchestra) :orc-contents (list (list (list "ASax") 1) (list (list "BTb") 3) (list (list "Hn") 1) (list (list "Vn") 1) (list (list "Vc") 3)) :microtones 2 :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 380 420) (om-make-point 963 217))) nil nil nil t) (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil) (om-load-inputkeyword (quote input-keyword) "" "dbnames" (quote :dbnames) nil nil))) (om-make-point 761 303) (om-make-point 96 59) (list (om-make-pathname :directory (quote (:absolute "Users" "bresson" "Dropbox" "workspaces" "om-acmmm" "out-files")) :device nil :host nil :name "orchidee" :type "txt")) "x" nil 1) (om-load-boxcomment "comment" (om-make-point 145 48) (quote "<= Lists available data bases") nil (om-make-point 1079 121) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 274 42) (quote ":dbnames = select specific subsets of your databases") nil (om-make-point 675 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 274 42) (quote ":criteria = select the criteria/descriptors used for the orchestration search") nil (om-make-point 36 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 145 48) (quote "<= Lists available research criteria") nil (om-make-point 469 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 607 30) (quote "Use the ORCHESTRATE 'keyword' inputs to access advanced setting of the Orchidée search process :") nil (om-make-point 88 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "MULTI-ITEM-LIST-BOX" (quote multi-item-list-box) (quote ((om-load-inputfun (quote input-funbox) "list items" "items" (list "uno" "dos" "tres" "cuatro")))) (om-make-point 876 701) (om-make-point 135 165) (let ((rep (om-make-dialog-item (quote multi-item-list) (om-make-point 1 1) (om-make-point 119 132) "untitled" :range (quote ("dbname" "source" "pitchCheck" "instrument" "family" "note" "octave" "dynamics" "string" "playingStyle" "brassMute" "stringMute"))))) (om-set-selected-item-index rep (quote (5))) (setf (di-data rep) (quote ("dbname" "source" "pitchCheck" "instrument" "family" "note" "octave" "dynamics" "string" "playingStyle" "brassMute" "stringMute"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 182 30) (quote "available filter attributes") "" (om-make-point 882 593) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "ORC-FILTER" (quote orc-filter) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "attribute to filter" "attribute" "note") (om-load-inputfunmenu1 (quote input-funmenu) "filter mode (select from list)" "mode" "force" (list (list "free" "free") (list "auto" "auto") (list "force" "force") (list "include" "incude") (list "exclude" "exclude"))) (om-load-inputfun (quote input-funbox) "values" "values" (list "A5" "A6")))) (om-make-point 295 647) (om-make-point 100 67) (if (find-class (quote orc-filter) nil) (make-instance (quote orc-filter) :attribute "note" :mode "force" :vals (list "A5" "A6") :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) nil nil nil t) (om-load-boxcall (quote genfun) "ORC-FIELDS" (quote orc-fields) (quote nil) (om-make-point 916 620) nil nil nil nil 1) (om-load-editor-box1 "ORC-SOLUTIONSET" (quote orc-solutionset) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "solutions" nil) (om-load-inputfun (quote input-funbox) "" "selection" nil))) (om-make-point 136 388) (om-make-point 128 76) (if (find-class (quote orc-solutionset) nil) (make-instance (quote orc-solutionset) :solutions nil :selection nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 305 161) (om-make-point 600 300))) nil nil nil t) (om-load-editor-box1 "SOUNDTARGET2" (quote soundtarget) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "chord" (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (om-load-inputfun (quote input-funbox) "" "params" nil) (om-load-inputfun (quote input-funbox) "" "operateurs" nil) (om-load-inputfun (quote input-funbox) "" "freq-filter" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "" "synth-class" (quote add-1)) (om-load-inputfun (quote input-funbox) "" "snd" nil))) (om-make-point 46 187) (om-make-point 95 63) (let ((rep (if (find-class (quote soundtarget) nil) (make-instance (quote soundtarget) :chord (let ((thechord (make-instance (quote chord-spectra) :lmidic (quote (5800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) :params (list (list (list (quote :nb-harm) 22) (list (quote :stretch-fact) (list 100)) (list (quote :amps) (list 0.0014125379 0.07943282 0.15848932 0.17782794 0.14125374 0.14125374 0.14125374 0.14125374 0.12589255 0.70866144 0.07943282 0.70794577 0.03981072 0.19952624 0.005011873 0.056234133 0.0031622777 0.019952622 0.015848933 0.012589254 0.01 0.0070794565)) (list (quote :add-partiels) nil))) :operateurs nil :freq-filter (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 2059.6 2632.2 4857.5)) (quote (-60.0 0.0 0.0 0.0 -75.2 -100.8 -94.4)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :synth-class (quote add-1) :snd (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) :from-file t)))) (setf (analysisparams rep) (list 80 25 "ChordSeq+ERB")) (setf (chordinfo rep) 0) (setf (chordmode rep) 2) (setf (targetchord rep) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote (((0) (om-make-color 0.5 0.5 0.5))))) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) rep) "x" nil (pairlis (quote (mode winpos winsize)) (list 1 (om-make-point 143 137) (om-make-point 1060 600))) nil nil nil t) (om-load-editor-box1 "MULTI-ITEM-LIST-BOX" (quote multi-item-list-box) (quote ((om-load-inputfun (quote input-funbox) "list items" "items" (list "uno" "dos" "tres" "cuatro")))) (om-make-point 326 160) (om-make-point 186 156) (let ((rep (om-make-dialog-item (quote multi-item-list) (om-make-point 1 1) (om-make-point 170 123) "untitled" :range (quote ("energyModAmp" "logAttackTime" "melMeanAmp" "partialsMeanAmplitude" "spectralCentroid" "spectralSpread"))))) (om-set-selected-item-index rep (quote (3 4 5))) (setf (di-data rep) (quote ("energyModAmp" "logAttackTime" "melMeanAmp" "partialsMeanAmplitude" "spectralCentroid" "spectralSpread"))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) t nil nil nil) (om-load-boxcall (quote genfun) "RESEARCH-CRITERIA" (quote research-criteria) (quote nil) (om-make-point 369 96) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 335 51) (quote "OM - ORCHIDEE Client$Advanced features / Filters") "" (om-make-point 89 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 24 390) (om-make-point 67 66) (load-buffer-textfile (quote nil) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:constraints :criteria :dbnames)" "Keyword input" (quote :criteria) nil nil))) (om-make-point 122 284) (om-make-point 96 59) nil nil nil 1) (om-load-editor-box1 "ORCHESTRA1" (quote orchestra) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "orc-contents" nil) (om-load-inputfun (quote input-funbox) "" "microtones" 2))) (om-make-point 145 186) (om-make-point 107 64) (if (find-class (quote orchestra) nil) (make-instance (quote orchestra) :orc-contents (list (list (list "ASax") 1) (list (list "BTb") 3) (list (list "Hn") 1) (list (list "Vn") 1) (list (list "Vc") 3)) :microtones 2 :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 380 420) (om-make-point 963 217))) nil nil nil t))) (quote ((15 0 0 0 nil 0) (7 0 3 0 nil 0) (7 0 5 0 nil 0) (4 0 7 0 nil 0) (6 0 7 1 nil 0) (23 0 7 2 nil 0) (15 0 11 0 nil 0) (10 0 13 0 nil 0) (12 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (24 0 21 0 nil 0) (31 0 25 0 nil 0) (28 0 27 0 nil 0) (31 0 30 0 nil 0) (26 0 31 0 nil 0) (32 0 31 1 nil 0) (27 0 31 2 nil 0))) nil 6.050102))
