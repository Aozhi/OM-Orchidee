; OM File Header - Saved 2012/01/18 12:44:21
; (6.050102 :patc (om-make-point 121 130) (om-make-point 516 264) (om-make-point 953 724) "" 183 0 nil "2012/01/18 11:44:58")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/my_synt.aiff") (list (quote :text) "../../out-files/orchidee.txt"))
(in-package :om)(load-lib-for (quote ("OM-Orchidee" "OMChroma")))(setf *om-current-persistent* (om-load-patch1 "03-orchidee-client" (quote ((om-load-boxcomment "comment" (om-make-point 248 75) (quote "Connect directly a SOUNDTARGET and an ORCHESTRA to ORCHESTRATE in order to perform all operations in a single OM evaluation") "" (om-make-point 596 213) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 171 484) (om-make-point 67 66) (load-textfile (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "orchidee" :type "txt") (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 287 46) (quote "Use ORCHESTRATE to run the remote search process in Orchidée.") "" (om-make-point 124 347) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 287 46) (quote "Use SUBMIT-ORCHESTRA to send or update the composition of the orchestra") "" (om-make-point 274 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 556 32) (quote "The Orchestration process can be done in separate steps or ina single OM evaluation.") "" (om-make-point 41 63) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 182 51) (quote "OM-Orchidee$Orchestration process") "" (om-make-point 42 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 186 27) (quote "\"Functional\" workflow:") "" (om-make-point 596 189) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 220 43) (quote "Use SUBMIT-TARGET to send or update the sound target.") "" (om-make-point 43 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil))) (om-make-point 171 397) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUBMIT-TARGET" (quote submit-target) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil))) (om-make-point 102 254.0) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUBMIT-ORCHESTRA" (quote submit-orchestra) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil))) (om-make-point 242 262.0) nil nil nil nil 1) (om-load-editor-box1 "ORCHESTRA1" (quote orchestra) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "ORC-CONTENTS" nil))) (om-make-point 274 167.0) (om-make-point 87 77) (if (find-class (quote orchestra) nil) (make-instance (quote orchestra) :orc-contents (list (list (list "Cb" "Bn" "Tb") 4) (list (list "Hn") 1) (list (list "Vc" nil) 1) (list (list "Vn" "Vc") 3)) :microtones 2 :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 268 226) (om-make-point 380 434))) nil nil nil t) (om-load-editor-box1 "SOUNDTARGET" (quote soundtarget) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "initial chord (symbolic pitches)" "chord" (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (om-load-inputfun (quote input-funbox) "attributes of the pitch spectral processing operators" "params" nil) (om-load-inputfun (quote input-funbox) "additional pitch processing operators" "operateurs" nil) (om-load-inputfun (quote input-funbox) "a filter for the resulting spectrum" "freq-filter" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "the OMChroma class used for synthesis" "synth-class" (quote add-1)) (om-load-inputfun (quote input-funbox) "the sound used as a target for orchestration" "snd" nil))) (om-make-point 136 169.0) (om-make-point 81 71) (let ((rep (if (find-class (quote soundtarget) nil) (make-instance (quote soundtarget) :chord (let ((thechord (make-instance (quote chord-spectra) :lmidic (quote (3700 4900 5900 6000 7300 7800 7800 8400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (80 80 80 100 80 80 80 80)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) :params (list (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100)))) :operateurs nil :freq-filter (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :synth-class (quote add-1) :snd (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) :from-file t)))) (setf (analysisparams rep) (list 80 25 "ChordSeq+ERB")) (setf (chordinfo rep) 2) (setf (chordmode rep) 1) (setf (targetchord rep) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 9050 9200 9500 9600 9800 10050 10150 8400 7700 7400 6900 6400 6200 6400 6900 7400 7900 8400 9200 6800 6100 5200 3700 3300 2800 4200 4700 5100 4200 5300)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) rep) "x" nil (pairlis (quote (winsize winpos mode)) (list (om-make-point 700 300) (om-make-point 129 16) 0)) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 193 66) (quote "<= Orchestrate returns the sound file containing all solutions found by Orchidée") "" (om-make-point 252 494) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 678 480) (om-make-point 67 66) (load-textfile (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host nil :name "orchidee" :type "txt") (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TARGET" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ORC" nil))) (om-make-point 629 401) (om-make-point 128 59) nil nil nil 1) (om-load-editor-box1 "ORCHESTRA1" (quote orchestra) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "ORC-CONTENTS" nil))) (om-make-point 720 315) (om-make-point 78 73) (if (find-class (quote orchestra) nil) (make-instance (quote orchestra) :orc-contents (list (list (list "Cb" "Bn") 4) (list (list "Hn") 1) (list (list "Vc") 1) (list (list "Vn" "Vc") 3)) :microtones 2 :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 268 226) (om-make-point 380 412))) nil nil nil t) (om-load-editor-box1 "SOUNDTARGET" (quote soundtarget) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "initial chord (symbolic pitches)" "chord" (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (om-load-inputfun (quote input-funbox) "attributes of the pitch spectral processing operators" "params" nil) (om-load-inputfun (quote input-funbox) "additional pitch processing operators" "operateurs" nil) (om-load-inputfun (quote input-funbox) "a filter for the resulting spectrum" "freq-filter" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 1000.0 2000.0 3000.0 4000.0 5000.0)) (quote (-60.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "the OMChroma class used for synthesis" "synth-class" (quote add-1)) (om-load-inputfun (quote input-funbox) "the sound used as a target for orchestration" "snd" nil))) (om-make-point 605 321) (om-make-point 76 64) (let ((rep (if (find-class (quote soundtarget) nil) (make-instance (quote soundtarget) :chord (let ((thechord (make-instance (quote chord-spectra) :lmidic (quote (3700 4900 6400)) :ldur (quote (1000 1000 1000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) :params (list (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100))) (list (list (quote :nb-harm) 6) (list (quote :stretch-fact) (list 100)) (list (quote :add-partiels) (list (list 1480.0 0.0031622777) (list 2160.0 0.0031622777) (list 2360.0 0.0028183833) (list 2920.0 0.001) (list 3040.0 0.0014125379)))) (list (list (quote :nb-harm) 1) (list (quote :stretch-fact) (list 100)))) :operateurs nil :freq-filter (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (102.6 413.1 1128.3 2977.3 4863.7 5282.2)) (quote (-39.2 4.8 -86.4 -102.4 -73.6 -91.2)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) :synth-class (quote add-1) :snd (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "my_synt" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "my_synt.aiff") (set-tonalite newobj nil) newobj) :from-file t)))) (setf (analysisparams rep) (list 80 0.015 (quote t))) (setf (chordinfo rep) 2) (setf (chordmode rep) 1) (setf (targetchord rep) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6900 6400 6200 6400 6900 6800 6100 5200 3700 3300 2800 4200 4700 5100 4200 5300)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) rep) "x" nil (pairlis (quote (winsize winpos mode)) (list (om-make-point 1060 600) (om-make-point 520 345) 1)) nil nil nil t))) (quote ((8 0 1 0 nil 0) (12 0 9 0 nil 0) (11 0 10 0 nil 0) (15 0 14 0 nil 0) (17 0 15 0 nil 0) (16 0 15 1 nil 0))) nil 6.050102))
